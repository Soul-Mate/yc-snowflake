// Code generated by protoc-gen-go. DO NOT EDIT.
// source: check.proto

package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_check_cae91d36cb5987a6, []int{0}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type SysTimestamp struct {
	Timestamp            uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SysTimestamp) Reset()         { *m = SysTimestamp{} }
func (m *SysTimestamp) String() string { return proto.CompactTextString(m) }
func (*SysTimestamp) ProtoMessage()    {}
func (*SysTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_check_cae91d36cb5987a6, []int{1}
}
func (m *SysTimestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SysTimestamp.Unmarshal(m, b)
}
func (m *SysTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SysTimestamp.Marshal(b, m, deterministic)
}
func (dst *SysTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysTimestamp.Merge(dst, src)
}
func (m *SysTimestamp) XXX_Size() int {
	return xxx_messageInfo_SysTimestamp.Size(m)
}
func (m *SysTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_SysTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_SysTimestamp proto.InternalMessageInfo

func (m *SysTimestamp) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Void)(nil), "Void")
	proto.RegisterType((*SysTimestamp)(nil), "SysTimestamp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	GetSysTimestamp(ctx context.Context, in *Void, opts ...grpc.CallOption) (*SysTimestamp, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetSysTimestamp(ctx context.Context, in *Void, opts ...grpc.CallOption) (*SysTimestamp, error) {
	out := new(SysTimestamp)
	err := c.cc.Invoke(ctx, "/TaskService/GetSysTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	GetSysTimestamp(context.Context, *Void) (*SysTimestamp, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GetSysTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetSysTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskService/GetSysTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetSysTimestamp(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysTimestamp",
			Handler:    _TaskService_GetSysTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "check.proto",
}

func init() { proto.RegisterFile("check.proto", fileDescriptor_check_cae91d36cb5987a6) }

var fileDescriptor_check_cae91d36cb5987a6 = []byte{
	// 115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0x48, 0x4d,
	0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x62, 0xe3, 0x62, 0x09, 0xcb, 0xcf, 0x4c, 0x51,
	0xd2, 0xe1, 0xe2, 0x09, 0xae, 0x2c, 0x0e, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x10,
	0x92, 0xe1, 0xe2, 0x2c, 0x81, 0x71, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0x10, 0x02, 0x46,
	0x66, 0x5c, 0xdc, 0x21, 0x89, 0xc5, 0xd9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xea,
	0x5c, 0xfc, 0xee, 0xa9, 0x25, 0x28, 0xfa, 0x59, 0xf5, 0x40, 0xc6, 0x4a, 0xf1, 0xea, 0x21, 0x8b,
	0x26, 0xb1, 0x81, 0x2d, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x13, 0x34, 0x74, 0x8e, 0x83,
	0x00, 0x00, 0x00,
}
